AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  SubnetId1:
    Type: String
  SubnetId2:
    Type: String
  SubnetPrivateId1:
    Type: String
  SubnetPrivateId2:
    Type: String
  VpcId:
    Type: String
  ExistingECSTaskRoleArn:
    Type: String
  ECRImage:
    Type: String
  HostedZoneId:
    Type: String
  DomainName:
    Type: String
  ACMCertificateArn:
    Type: String

Resources:
  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: ogata-cloudformation-alb2
      Subnets:
        - !Ref SubnetId1
        - !Ref SubnetId2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: ogata-cloudformation-alb-tg2
      VpcId: !Ref VpcId
      Port: 8080 # 変更: 80 -> 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPort: '8080' # 変更: '80' -> '8080'
      HealthCheckPath: '/'
      Matcher:
        HttpCode: '200'
    DependsOn: ALB

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ACMCertificateArn
    DependsOn: ALBTargetGroup

  Route53RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      Name: ogata-cloudformation-for-alb-sg2
      GroupDescription: 'Allow HTTP traffic'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 13.114.22.14/32

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: ogata-cloudformation-cluster2

  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/ecs/ogata-dummy-container2'
      RetentionInDays: 7

  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ogata-ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: 'ogata-dummy-task-family2'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      RuntimePlatform:
        OperatingSystemFamily: LINUX
        CpuArchitecture: X86_64
      ContainerDefinitions:
        - Name: 'ogata-dummy-container2'
          Image: !Ref ECRImage
          Essential: true
          PortMappings:
            - ContainerPort: 8080 # 変更: 80 -> 8080
              HostPort: 8080 # 変更: 80 -> 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetPrivateId2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: 'ogata-dummy-container2'
          ContainerPort: 8080 # 変更: 80 -> 8080
          TargetGroupArn: !Ref ALBTargetGroup
      TaskDefinition: !Ref ECSTaskDefinition
    DependsOn:
      - ALBListener
      - LogGroup

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      Name: ogata-cloudformation-for-ecs-sg2
      GroupDescription: 'Allow traffic from ALB'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080 # 変更: 80 -> 8080
          ToPort: 8080 # 変更: 80 -> 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
